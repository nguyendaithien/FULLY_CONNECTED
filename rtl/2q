module TOP #(parameter DATA_WIDTH = 16, IFM_WIDTH = 8, WGT_WIDTH = 8, IFM_SIZE = 1962 ) (
	 clk1
	,clk2
	,rst_n
	,ifm_read
	,wgt_read
	,ifm_buff_rd
	,wgt_buff_rd
	,ifm_buff_wr
	,wgt_buff_wr
	,ifm
	,input_valid
	,wgt
	,set_reg
	,ofm1
	,ofm2
	,ofm3
	,ofm4
	,ofm5
	,ofm6
	,ofm7
	,ofm8
);
input  clk1;
input  clk2;
input  rst_n;
input  ifm_read;
input  set_reg;
input  wgt_read;
input  ifm_buff_rd;
input  wgt_buff_rd;
input  ifm_buff_wr;
input  wgt_buff_wr;	
input  input_valid;
input  [IFM_WIDTH-1:0] ifm;
input  [8*WGT_WIDTH-1 : 0] wgt;
output [DATA_WIDTH-1:0] ofm1; 	
output [DATA_WIDTH-1:0] ofm2; 	
output [DATA_WIDTH-1:0] ofm3; 	
output [DATA_WIDTH-1:0] ofm4; 	
output [DATA_WIDTH-1:0] ofm5; 	
output [DATA_WIDTH-1:0] ofm6; 	
output [DATA_WIDTH-1:0] ofm7; 	
output [DATA_WIDTH-1:0] ofm8; 	

wire [WGT_WIDTH-1:0] wgt1;
wire [WGT_WIDTH-1:0] wgt2;
wire [WGT_WIDTH-1:0] wgt3;
wire [WGT_WIDTH-1:0] wgt4;
wire [WGT_WIDTH-1:0] wgt5;
wire [WGT_WIDTH-1:0] wgt6;
wire [WGT_WIDTH-1:0] wgt7;
wire [WGT_WIDTH-1:0] wgt8;

wire [IFM_WIDTH - 1: 0] ifm_out;

assign wgt1 = wgt[7:0]  ;
assign wgt2 = wgt[15:8] ;
assign wgt3 = wgt[23:16];
assign wgt4 = wgt[31:24];
assign wgt5 = wgt[39:32];
assign wgt6 = wgt[47:40];
assign wgt7 = wgt[55:48];
assign wgt8 = wgt[63:56];

wire [DATA_WIDTH-1:0] psum_out1;
wire [DATA_WIDTH-1:0] psum_out2;
wire [DATA_WIDTH-1:0] psum_out3;
wire [DATA_WIDTH-1:0] psum_out4;
wire [DATA_WIDTH-1:0] psum_out5;
wire [DATA_WIDTH-1:0] psum_out6;
wire [DATA_WIDTH-1:0] psum_out7;
wire [DATA_WIDTH-1:0] psum_out8;

wire [DATA_WIDTH-1:0] ifm_v;
wire wr_en;


FIFO_ASYNCH #(.DATA_WIDTH(DATA_WIDTH), .FIFO_SIZE(IFM_SIZE)) ifm_buffer(
	.clk1(clk1)  ,
  .clk2(clk2)  ,
  .rd_clr(rd_clr),
  .wr_clr(wr_clr),
  .rd_inc(1'b1),
  .wr_inc(1'b1),
  .wr_en(wr_en) ,
  .rd_en(rd_en) ,
  .data_in_fifo(ifm) ,
  .data_out_fifo(ifm_out)
	);

// sinal controll write for FIFO
//assign wr_en = ifm_valid;

PE #(.WGT_WIDTH(WGT_WIDTH), .DATA_WIDTH(DATA_WIDTH), .IFM_WIDTH(IFM_WIDTH) ) pe1(
      .clk(clk1)
     ,.rst_n(rst_n)
     ,.set_reg(set_reg)
     ,.ifm(ifm_out)
     ,.wgt(wgt1)
     ,.psum_in(psum_out1)
     ,.psum_out(psum_out1)
);
PE #(.WGT_WIDTH(WGT_WIDTH), .DATA_WIDTH(DATA_WIDTH), .IFM_WIDTH(IFM_WIDTH) ) pe2(
      .clk(clk1)
     ,.rst_n(rst_n)
     ,.set_reg(set_reg)
     ,.ifm(ifm_out)
     ,.wgt(wgt2)
     ,.psum_in(psum_out2)
     ,.psum_out(psum_out2)
);
PE #(.WGT_WIDTH(WGT_WIDTH), .DATA_WIDTH(DATA_WIDTH), .IFM_WIDTH(IFM_WIDTH) ) pe3(
      .clk(clk1)
     ,.rst_n(rst_n)
     ,.set_reg(set_reg)
     ,.ifm(ifm_out)
     ,.wgt(wgt3)
     ,.psum_in(psum_out3)
     ,.psum_out(psum_out3)
);
PE #(.WGT_WIDTH(WGT_WIDTH), .DATA_WIDTH(DATA_WIDTH), .IFM_WIDTH(IFM_WIDTH) ) pe4(
      .clk(clk1)
     ,.rst_n(rst_n)
     ,.set_reg(set_reg)
     ,.ifm(ifm_out)
     ,.wgt(wgt4)
     ,.psum_in(psum_out4)
     ,.psum_out(psum_out4)
);
PE #(.WGT_WIDTH(WGT_WIDTH), .DATA_WIDTH(DATA_WIDTH), .IFM_WIDTH(IFM_WIDTH) ) pe5(
      .clk(clk1)
     ,.rst_n(rst_n)
     ,.set_reg(set_reg)
     ,.ifm(ifm_out)
     ,.wgt(wgt5)
     ,.psum_in(psum_out5) 
     ,.psum_out(psum_out5)
);
PE #(.WGT_WIDTH(WGT_WIDTH), .DATA_WIDTH(DATA_WIDTH), .IFM_WIDTH(IFM_WIDTH) ) pe6(
      .clk(clk1)
     ,.rst_n(rst_n)
     ,.set_reg(set_reg)
     ,.ifm(ifm_out)
     ,.wgt(wgt6)
     ,.psum_in(psum_out6)
     ,.psum_out(psum_out6)
);
PE #(.WGT_WIDTH(WGT_WIDTH), .DATA_WIDTH(DATA_WIDTH), .IFM_WIDTH(IFM_WIDTH) ) pe7(
      .clk(clk1)
     ,.rst_n(rst_n)
     ,.set_reg(set_reg)
     ,.ifm(ifm_out)
     ,.wgt(wgt7)
     ,.psum_in(psum_out7)
     ,.psum_out(psum_out7)
);
PE #(.WGT_WIDTH(WGT_WIDTH), .DATA_WIDTH(DATA_WIDTH), .IFM_WIDTH(IFM_WIDTH) ) pe8(
      .clk(clk1)
     ,.rst_n(rst_n)
     ,.set_reg(set_reg)
     ,.ifm(ifm_out)
     ,.wgt(wgt8)
     ,.psum_in(psum_out8)
     ,.psum_out(psum_out8)
);

endmodule

