module TOP #(parameter DATA_WIDTH = 16, IFM_WIDTH = 8, WGT_WIDTH = 8, IFM_SIZE = 9162, KERNEL_SIZE = 4096, TILING_SIZE = 8   ) (
	 clk1
	,clk2
	,rst_n
	,ifm          // input fM
	,valid_ifm  // signal when input valid
	,wgt           // weight
	,ofm1                 
	,ofm2
	,ofm3
	,ofm4
	,ofm5
	,ofm6
	,ofm7
	,ofm8
	,ifm_read
	,wgt_read
);
input  clk1;
input  clk2;
input  rst_n;
input  valid_ifm;
input  [IFM_WIDTH-1:0] ifm;
input  [8*WGT_WIDTH-1 : 0] wgt;
output [DATA_WIDTH-1:0] ofm1; 	
output [DATA_WIDTH-1:0] ofm2; 	
output [DATA_WIDTH-1:0] ofm3; 	
output [DATA_WIDTH-1:0] ofm4; 	
output [DATA_WIDTH-1:0] ofm5; 	
output [DATA_WIDTH-1:0] ofm6; 	
output [DATA_WIDTH-1:0] ofm7; 	
output [DATA_WIDTH-1:0] ofm8; 	
output ifm_read;
output wgt_read;

wire   [WGT_WIDTH-1:0] wgt1 ;
wire   [WGT_WIDTH-1:0] wgt2 ;
wire   [WGT_WIDTH-1:0] wgt3 ;
wire   [WGT_WIDTH-1:0] wgt4 ;
wire   [WGT_WIDTH-1:0] wgt5 ;
wire   [WGT_WIDTH-1:0] wgt6 ;
wire   [WGT_WIDTH-1:0] wgt7 ;
wire   [WGT_WIDTH-1:0] wgt8 ;

wire   [IFM_WIDTH - 1: 0] ifm_out;

assign wgt1 = wgt[7:0]  ;
assign wgt2 = wgt[15:8] ;
assign wgt3 = wgt[23:16];
assign wgt4 = wgt[31:24];
assign wgt5 = wgt[39:32];
assign wgt6 = wgt[47:40];
assign wgt7 = wgt[55:48];
assign wgt8 = wgt[63:56];

wire [DATA_WIDTH-1:0] psum_out1;
wire [DATA_WIDTH-1:0] psum_out2;
wire [DATA_WIDTH-1:0] psum_out3;
wire [DATA_WIDTH-1:0] psum_out4;
wire [DATA_WIDTH-1:0] psum_out5;
wire [DATA_WIDTH-1:0] psum_out6;
wire [DATA_WIDTH-1:0] psum_out7;
wire [DATA_WIDTH-1:0] psum_out8;

wire [DATA_WIDTH-1:0] ifm_v;
wire wr_en;
wire ifm_read;
wire wgt_read;
wire wr_buff_ifm;
wire rd_buff_ifm;
wire set_reg;
wire wr_ifm_clr;
wire rd_ifm_clr;

wire last_channel;
wire end_compute;
CONTROLLER #(.IFM_SIZE(IFM_SIZE), .TILING_SIZE(TILING_SIZE), .KERNEL_SIZE(KERNEL_SIZE))  controller (
   .clk(clk1)
	,.rst_n(rst_n)
	,.start(1'b0)
	,.ifm_read(ifm_read)
	,.wgt_read(wgt_read)
	,.valid_ifm(valid_ifm)
	,.last_kernel(last_kernel)
	,.end_compute(end_compute)
	,.wr_buff_ifm(wr_buff_ifm)
	,.rd_buff_ifm(rd_buff_ifm)
	,.set_reg(set_reg)
	,.wr_ifm_clr(wr_ifm_clr)
	,.rd_ifm_clr(rd_ifm_clr)
);


FIFO_ASYNCH #(.DATA_WIDTH(DATA_WIDTH), .FIFO_SIZE(IFM_SIZE)) ifm_buffer(
	.clk1(clk1)  ,
  .clk2(clk2)  ,
  .rd_clr(rd_ifm_clr),
  .wr_clr(wr_ifm_clr),
  .rd_inc(1'b1),
  .wr_inc(1'b1),
  .wr_en(wr_buff_ifm) ,
  .rd_en(rd_buff_ifm) ,
  .data_in_fifo(ifm) ,
  .data_out_fifo(ifm_out)
	);

// sinal controll write for FIFO
//assign wr_en = ifm_valid;

PE #(.WGT_WIDTH(WGT_WIDTH), .DATA_WIDTH(DATA_WIDTH), .IFM_WIDTH(IFM_WIDTH) ) pe1(
      .clk(clk1)
     ,.rst_n(rst_n)
     ,.set_reg(set_reg)
     ,.ifm(ifm_out)
     ,.wgt(wgt1)
     ,.psum_in(psum_out1)
     ,.psum_out(psum_out1)
);
PE #(.WGT_WIDTH(WGT_WIDTH), .DATA_WIDTH(DATA_WIDTH), .IFM_WIDTH(IFM_WIDTH) ) pe2(
      .clk(clk1)
     ,.rst_n(rst_n)
     ,.set_reg(set_reg)
     ,.ifm(ifm_out)
     ,.wgt(wgt2)
     ,.psum_in(psum_out2)
     ,.psum_out(psum_out2)
);
PE #(.WGT_WIDTH(WGT_WIDTH), .DATA_WIDTH(DATA_WIDTH), .IFM_WIDTH(IFM_WIDTH) ) pe3(
      .clk(clk1)
     ,.rst_n(rst_n)
     ,.set_reg(set_reg)
     ,.ifm(ifm_out)
     ,.wgt(wgt3)
     ,.psum_in(psum_out3)
     ,.psum_out(psum_out3)
);
PE #(.WGT_WIDTH(WGT_WIDTH), .DATA_WIDTH(DATA_WIDTH), .IFM_WIDTH(IFM_WIDTH) ) pe4(
      .clk(clk1)
     ,.rst_n(rst_n)
     ,.set_reg(set_reg)
     ,.ifm(ifm_out)
     ,.wgt(wgt4)
     ,.psum_in(psum_out4)
     ,.psum_out(psum_out4)
);
PE #(.WGT_WIDTH(WGT_WIDTH), .DATA_WIDTH(DATA_WIDTH), .IFM_WIDTH(IFM_WIDTH) ) pe5(
      .clk(clk1)
     ,.rst_n(rst_n)
     ,.set_reg(set_reg)
     ,.ifm(ifm_out)
     ,.wgt(wgt5)
     ,.psum_in(psum_out5) 
     ,.psum_out(psum_out5)
);
PE #(.WGT_WIDTH(WGT_WIDTH), .DATA_WIDTH(DATA_WIDTH), .IFM_WIDTH(IFM_WIDTH) ) pe6(
      .clk(clk1)
     ,.rst_n(rst_n)
     ,.set_reg(set_reg)
     ,.ifm(ifm_out)
     ,.wgt(wgt6)
     ,.psum_in(psum_out6)
     ,.psum_out(psum_out6)
);
PE #(.WGT_WIDTH(WGT_WIDTH), .DATA_WIDTH(DATA_WIDTH), .IFM_WIDTH(IFM_WIDTH) ) pe7(
      .clk(clk1)
     ,.rst_n(rst_n)
     ,.set_reg(set_reg)
     ,.ifm(ifm_out)
     ,.wgt(wgt7)
     ,.psum_in(psum_out7)
     ,.psum_out(psum_out7)
);
PE #(.WGT_WIDTH(WGT_WIDTH), .DATA_WIDTH(DATA_WIDTH), .IFM_WIDTH(IFM_WIDTH) ) pe8(
      .clk(clk1)
     ,.rst_n(rst_n)
     ,.set_reg(set_reg)
     ,.ifm(ifm_out)
     ,.wgt(wgt8)
     ,.psum_in(psum_out8)
     ,.psum_out(psum_out8)
);

endmodule

